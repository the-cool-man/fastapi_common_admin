[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "asc",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "user_route",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "staff_route",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "site_setting_route",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "src",
        "description": "src",
        "isExtraImport": true,
        "detail": "src",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "JSONResponse",
        "importPath": "fastapi.responses",
        "description": "fastapi.responses",
        "isExtraImport": true,
        "detail": "fastapi.responses",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Request",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "date",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "Decimal",
        "importPath": "decimal",
        "description": "decimal",
        "isExtraImport": true,
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "enum",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "enum",
        "description": "enum",
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy.sql",
        "description": "sqlalchemy.sql",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql",
        "documentation": {}
    },
    {
        "label": "BaseDic",
        "importPath": "src.utils.request_parser",
        "description": "src.utils.request_parser",
        "isExtraImport": true,
        "detail": "src.utils.request_parser",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "field_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "model_validator",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "UploadFile",
        "importPath": "starlette.datastructures",
        "description": "starlette.datastructures",
        "isExtraImport": true,
        "detail": "starlette.datastructures",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "as_declarative",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "declared_attr",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "engine",
        "importPath": "db_connection.session",
        "description": "db_connection.session",
        "isExtraImport": true,
        "detail": "db_connection.session",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "importPath": "db_connection.session",
        "description": "db_connection.session",
        "isExtraImport": true,
        "detail": "db_connection.session",
        "documentation": {}
    },
    {
        "label": "StaticFiles",
        "importPath": "fastapi.staticfiles",
        "description": "fastapi.staticfiles",
        "isExtraImport": true,
        "detail": "fastapi.staticfiles",
        "documentation": {}
    },
    {
        "label": "RequestValidationError",
        "importPath": "fastapi.exceptions",
        "description": "fastapi.exceptions",
        "isExtraImport": true,
        "detail": "fastapi.exceptions",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "AdminRole",
        "importPath": "models.admin_role_model",
        "description": "models.admin_role_model",
        "isExtraImport": true,
        "detail": "models.admin_role_model",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.379fd34a16b6_create_admin_role_table",
        "description": "migrations.versions.379fd34a16b6_create_admin_role_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('admin_role',\n    sa.Column('id', sa.Integer(), nullable=False),\n    sa.Column('status', sa.Enum('A', 'I', name='statusenum'), nullable=False),\n    sa.Column('role_name', sa.String(length=255), nullable=True),\n    sa.Column('site_setting', sa.Enum('Y', 'N', name='yesnoenum'), nullable=False),\n    sa.Column('banner', sa.Enum('Y', 'N', name='yesnoenum'), nullable=False),\n    sa.Column('category', sa.Enum('Y', 'N', name='yesnoenum'), nullable=False),",
        "detail": "migrations.versions.379fd34a16b6_create_admin_role_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.379fd34a16b6_create_admin_role_table",
        "description": "migrations.versions.379fd34a16b6_create_admin_role_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_admin_role_id'), table_name='admin_role')\n    op.drop_table('admin_role')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.379fd34a16b6_create_admin_role_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.4b43e9a93a3a_create_admin_users_table",
        "description": "migrations.versions.4b43e9a93a3a_create_admin_users_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('admin_users',\n    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),\n    sa.Column('status', sa.Enum('INACTIVE', 'ACTIVE', name='userstatusenum'), nullable=False),\n    sa.Column('username', sa.String(length=100), nullable=True),\n    sa.Column('password', sa.String(length=100), nullable=True),\n    sa.Column('c_password', sa.String(length=100), nullable=True),\n    sa.Column('email', sa.String(length=50), nullable=True),",
        "detail": "migrations.versions.4b43e9a93a3a_create_admin_users_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.4b43e9a93a3a_create_admin_users_table",
        "description": "migrations.versions.4b43e9a93a3a_create_admin_users_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_admin_users_id'), table_name='admin_users')\n    op.drop_table('admin_users')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.4b43e9a93a3a_create_admin_users_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.511647c0e5a4_create_social_newtworking_links",
        "description": "migrations.versions.511647c0e5a4_create_social_newtworking_links",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('social_networking_links',\n    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),\n    sa.Column('status', sa.Enum('I', 'A', name='socialmediastatusenum'), nullable=False),\n    sa.Column('social_name', sa.String(length=50), nullable=True),\n    sa.Column('social_link', sa.String(length=200), nullable=True),\n    sa.Column('social_logo', sa.String(length=100), nullable=True),\n    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=True),",
        "detail": "migrations.versions.511647c0e5a4_create_social_newtworking_links",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.511647c0e5a4_create_social_newtworking_links",
        "description": "migrations.versions.511647c0e5a4_create_social_newtworking_links",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_social_networking_links_id'), table_name='social_networking_links')\n    op.drop_table('social_networking_links')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.511647c0e5a4_create_social_newtworking_links",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.79bc78a31b85_seed_admin_role_data",
        "description": "migrations.versions.79bc78a31b85_seed_admin_role_data",
        "peekOfCode": "def upgrade() -> None:\n    connection = op.get_bind()\n    connection.execute(\n        sa.text(\"\"\"\n        INSERT INTO admin_role \n        (id, status, role_name, site_setting, banner, category, currency, tax_data, country, state, city,\n         media_gallery, all_user, chat, rating, site_content, email_template, sms_template, rest_api,\n         payment_plan, created_at, updated_at, deleted_at)\n        VALUES\n        (1, 'A', 'Super Admin', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', 'Y', '2023-10-16 05:52:38', NULL, NULL),",
        "detail": "migrations.versions.79bc78a31b85_seed_admin_role_data",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.79bc78a31b85_seed_admin_role_data",
        "description": "migrations.versions.79bc78a31b85_seed_admin_role_data",
        "peekOfCode": "def downgrade() -> None:\n    connection = op.get_bind()\n    connection.execute(sa.text(\"DELETE FROM admin_role\"))",
        "detail": "migrations.versions.79bc78a31b85_seed_admin_role_data",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.93891ab481be_create_admin_role_table",
        "description": "migrations.versions.93891ab481be_create_admin_role_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.93891ab481be_create_admin_role_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.93891ab481be_create_admin_role_table",
        "description": "migrations.versions.93891ab481be_create_admin_role_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.93891ab481be_create_admin_role_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.9df2525fe0ce_create_public_page_seo",
        "description": "migrations.versions.9df2525fe0ce_create_public_page_seo",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.9df2525fe0ce_create_public_page_seo",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.9df2525fe0ce_create_public_page_seo",
        "description": "migrations.versions.9df2525fe0ce_create_public_page_seo",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.9df2525fe0ce_create_public_page_seo",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.f8536a1b057a_create_social_newtworking_links",
        "description": "migrations.versions.f8536a1b057a_create_social_newtworking_links",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.f8536a1b057a_create_social_newtworking_links",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.f8536a1b057a_create_social_newtworking_links",
        "description": "migrations.versions.f8536a1b057a_create_social_newtworking_links",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    pass\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.f8536a1b057a_create_social_newtworking_links",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "migrations.versions.fbcf239999ec_create_side_config_table",
        "description": "migrations.versions.fbcf239999ec_create_side_config_table",
        "peekOfCode": "def upgrade() -> None:\n    \"\"\"Upgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('site_config',\n    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),\n    sa.Column('status', sa.Enum('I', 'A', name='configstatusenum'), nullable=False),\n    sa.Column('web_name', sa.String(length=200), nullable=True),\n    sa.Column('web_frienly_name', sa.String(length=100), nullable=True),\n    sa.Column('logo', sa.String(length=100), nullable=True),\n    sa.Column('favicon', sa.String(length=100), nullable=True),",
        "detail": "migrations.versions.fbcf239999ec_create_side_config_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "migrations.versions.fbcf239999ec_create_side_config_table",
        "description": "migrations.versions.fbcf239999ec_create_side_config_table",
        "peekOfCode": "def downgrade() -> None:\n    \"\"\"Downgrade schema.\"\"\"\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_index(op.f('ix_site_config_id'), table_name='site_config')\n    op.drop_table('site_config')\n    # ### end Alembic commands ###",
        "detail": "migrations.versions.fbcf239999ec_create_side_config_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"\n    url = config.get_main_option(\"sqlalchemy.url\")",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "config = context.config\n# Get database URL from environment\ndatabase_url = os.getenv(\"DB_CONNECTION_URL\")\nif database_url:\n    config.set_main_option(\"sqlalchemy.url\", database_url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "database_url",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "database_url = os.getenv(\"DB_CONNECTION_URL\")\nif database_url:\n    config.set_main_option(\"sqlalchemy.url\", database_url)\n# Interpret the config file for Python logging.\n# This line sets up loggers basically.\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# add your model's MetaData object here\n# for 'autogenerate' support\n# from myapp import mymodel",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "migrations.env",
        "description": "migrations.env",
        "peekOfCode": "target_metadata = Base.metadata\n# other values from the config, defined by the needs of env.py,\n# can be acquired:\n# my_important_option = config.get_main_option(\"my_important_option\")\n# ... etc.\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation",
        "detail": "migrations.env",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "kind": 5,
        "importPath": "src.controllers.site_setting_controller",
        "description": "src.controllers.site_setting_controller",
        "peekOfCode": "UPLOAD_DIR = \"uploads\"\nLOGO_DIR = os.path.join(UPLOAD_DIR, \"logos\")\nFAVICON_DIR = os.path.join(UPLOAD_DIR, \"favicons\")\nSOCIAL_LOGO_DIR = os.path.join(UPLOAD_DIR, \"social\")\nPAGE_SEO_DIR = os.path.join(UPLOAD_DIR, \"seoImage\")\nasync def handleLogoFavicon(request_data, db):\n    logo_filename = None\n    favicon_filename = None\n    logo_path = None\n    favicon_path = None",
        "detail": "src.controllers.site_setting_controller",
        "documentation": {}
    },
    {
        "label": "LOGO_DIR",
        "kind": 5,
        "importPath": "src.controllers.site_setting_controller",
        "description": "src.controllers.site_setting_controller",
        "peekOfCode": "LOGO_DIR = os.path.join(UPLOAD_DIR, \"logos\")\nFAVICON_DIR = os.path.join(UPLOAD_DIR, \"favicons\")\nSOCIAL_LOGO_DIR = os.path.join(UPLOAD_DIR, \"social\")\nPAGE_SEO_DIR = os.path.join(UPLOAD_DIR, \"seoImage\")\nasync def handleLogoFavicon(request_data, db):\n    logo_filename = None\n    favicon_filename = None\n    logo_path = None\n    favicon_path = None\n    try:",
        "detail": "src.controllers.site_setting_controller",
        "documentation": {}
    },
    {
        "label": "FAVICON_DIR",
        "kind": 5,
        "importPath": "src.controllers.site_setting_controller",
        "description": "src.controllers.site_setting_controller",
        "peekOfCode": "FAVICON_DIR = os.path.join(UPLOAD_DIR, \"favicons\")\nSOCIAL_LOGO_DIR = os.path.join(UPLOAD_DIR, \"social\")\nPAGE_SEO_DIR = os.path.join(UPLOAD_DIR, \"seoImage\")\nasync def handleLogoFavicon(request_data, db):\n    logo_filename = None\n    favicon_filename = None\n    logo_path = None\n    favicon_path = None\n    try:\n        if getattr(request_data, \"id\", None):",
        "detail": "src.controllers.site_setting_controller",
        "documentation": {}
    },
    {
        "label": "SOCIAL_LOGO_DIR",
        "kind": 5,
        "importPath": "src.controllers.site_setting_controller",
        "description": "src.controllers.site_setting_controller",
        "peekOfCode": "SOCIAL_LOGO_DIR = os.path.join(UPLOAD_DIR, \"social\")\nPAGE_SEO_DIR = os.path.join(UPLOAD_DIR, \"seoImage\")\nasync def handleLogoFavicon(request_data, db):\n    logo_filename = None\n    favicon_filename = None\n    logo_path = None\n    favicon_path = None\n    try:\n        if getattr(request_data, \"id\", None):\n            site_config = db.query(SiteConfig).filter(",
        "detail": "src.controllers.site_setting_controller",
        "documentation": {}
    },
    {
        "label": "PAGE_SEO_DIR",
        "kind": 5,
        "importPath": "src.controllers.site_setting_controller",
        "description": "src.controllers.site_setting_controller",
        "peekOfCode": "PAGE_SEO_DIR = os.path.join(UPLOAD_DIR, \"seoImage\")\nasync def handleLogoFavicon(request_data, db):\n    logo_filename = None\n    favicon_filename = None\n    logo_path = None\n    favicon_path = None\n    try:\n        if getattr(request_data, \"id\", None):\n            site_config = db.query(SiteConfig).filter(\n                SiteConfig.id == request_data.id).first()",
        "detail": "src.controllers.site_setting_controller",
        "documentation": {}
    },
    {
        "label": "db_session",
        "kind": 2,
        "importPath": "src.db_connection.db_session",
        "description": "src.db_connection.db_session",
        "peekOfCode": "def db_session():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\nDBSession = Annotated[Session, Depends(db_session)]\nBase = declarative_base()",
        "detail": "src.db_connection.db_session",
        "documentation": {}
    },
    {
        "label": "DBSession",
        "kind": 5,
        "importPath": "src.db_connection.db_session",
        "description": "src.db_connection.db_session",
        "peekOfCode": "DBSession = Annotated[Session, Depends(db_session)]\nBase = declarative_base()",
        "detail": "src.db_connection.db_session",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.db_connection.db_session",
        "description": "src.db_connection.db_session",
        "peekOfCode": "Base = declarative_base()",
        "detail": "src.db_connection.db_session",
        "documentation": {}
    },
    {
        "label": "DATABASE_URL",
        "kind": 5,
        "importPath": "src.db_connection.session",
        "description": "src.db_connection.session",
        "peekOfCode": "DATABASE_URL = os.getenv(\"DB_CONNECTION_URL\")\n# Create engine and session\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "src.db_connection.session",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "src.db_connection.session",
        "description": "src.db_connection.session",
        "peekOfCode": "engine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "src.db_connection.session",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "src.db_connection.session",
        "description": "src.db_connection.session",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)",
        "detail": "src.db_connection.session",
        "documentation": {}
    },
    {
        "label": "StatusEnum",
        "kind": 6,
        "importPath": "src.models.admin_role_model",
        "description": "src.models.admin_role_model",
        "peekOfCode": "class StatusEnum(str, enum.Enum):\n    A = \"A\"\n    I = \"I\"\nclass YesNoEnum(str, enum.Enum):\n    Y = \"Y\"\n    N = \"N\"\nclass AdminRole(Base):\n    __tablename__ = \"admin_role\"\n    id = Column(Integer, primary_key=True, index=True)\n    status = Column(Enum(StatusEnum), nullable=False, default=StatusEnum.A)",
        "detail": "src.models.admin_role_model",
        "documentation": {}
    },
    {
        "label": "YesNoEnum",
        "kind": 6,
        "importPath": "src.models.admin_role_model",
        "description": "src.models.admin_role_model",
        "peekOfCode": "class YesNoEnum(str, enum.Enum):\n    Y = \"Y\"\n    N = \"N\"\nclass AdminRole(Base):\n    __tablename__ = \"admin_role\"\n    id = Column(Integer, primary_key=True, index=True)\n    status = Column(Enum(StatusEnum), nullable=False, default=StatusEnum.A)\n    role_name = Column(String(255))\n    site_setting = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)\n    banner = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)",
        "detail": "src.models.admin_role_model",
        "documentation": {}
    },
    {
        "label": "AdminRole",
        "kind": 6,
        "importPath": "src.models.admin_role_model",
        "description": "src.models.admin_role_model",
        "peekOfCode": "class AdminRole(Base):\n    __tablename__ = \"admin_role\"\n    id = Column(Integer, primary_key=True, index=True)\n    status = Column(Enum(StatusEnum), nullable=False, default=StatusEnum.A)\n    role_name = Column(String(255))\n    site_setting = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)\n    banner = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)\n    category = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)\n    currency = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)\n    tax_data = Column(Enum(YesNoEnum), nullable=False, default=YesNoEnum.N)",
        "detail": "src.models.admin_role_model",
        "documentation": {}
    },
    {
        "label": "ConfigStatusEnum",
        "kind": 6,
        "importPath": "src.models.site_config_model",
        "description": "src.models.site_config_model",
        "peekOfCode": "class ConfigStatusEnum(str, enum.Enum):\n    INACTIVE = \"I\"\n    ACTIVE = \"A\"\nclass SocialMediaStatusEnum(str, enum.Enum):\n    INACTIVE = \"I\"\n    ACTIVE = \"A\"\nclass SiteConfig(Base):\n    __tablename__ = \"site_config\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(",
        "detail": "src.models.site_config_model",
        "documentation": {}
    },
    {
        "label": "SocialMediaStatusEnum",
        "kind": 6,
        "importPath": "src.models.site_config_model",
        "description": "src.models.site_config_model",
        "peekOfCode": "class SocialMediaStatusEnum(str, enum.Enum):\n    INACTIVE = \"I\"\n    ACTIVE = \"A\"\nclass SiteConfig(Base):\n    __tablename__ = \"site_config\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(\n        Enum(ConfigStatusEnum, values_callable=lambda enum_cls: [\n             e.value for e in enum_cls]),\n        nullable=False,",
        "detail": "src.models.site_config_model",
        "documentation": {}
    },
    {
        "label": "SiteConfig",
        "kind": 6,
        "importPath": "src.models.site_config_model",
        "description": "src.models.site_config_model",
        "peekOfCode": "class SiteConfig(Base):\n    __tablename__ = \"site_config\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(\n        Enum(ConfigStatusEnum, values_callable=lambda enum_cls: [\n             e.value for e in enum_cls]),\n        nullable=False,\n        default=ConfigStatusEnum.INACTIVE\n    )\n    web_name = Column(String(200))",
        "detail": "src.models.site_config_model",
        "documentation": {}
    },
    {
        "label": "SocialMedia",
        "kind": 6,
        "importPath": "src.models.site_config_model",
        "description": "src.models.site_config_model",
        "peekOfCode": "class SocialMedia(Base, BaseDic):\n    __tablename__ = \"social_networking_links\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(\n        Enum(SocialMediaStatusEnum, values_callable=lambda enum_cls: [\n             e.value for e in enum_cls]),\n        nullable=False,\n        default=SocialMediaStatusEnum.INACTIVE\n    )\n    social_name = Column(String(50))",
        "detail": "src.models.site_config_model",
        "documentation": {}
    },
    {
        "label": "PublicPageSEO",
        "kind": 6,
        "importPath": "src.models.site_config_model",
        "description": "src.models.site_config_model",
        "peekOfCode": "class PublicPageSEO(Base, BaseDic):\n    __tablename__ = \"public_pages_seo\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(\n        Enum(SocialMediaStatusEnum, values_callable=lambda enum_cls: [\n             e.value for e in enum_cls]),\n        nullable=False,\n        default=SocialMediaStatusEnum.INACTIVE\n    )\n    page_name = Column(String(50))",
        "detail": "src.models.site_config_model",
        "documentation": {}
    },
    {
        "label": "UserStatusEnum",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class UserStatusEnum(str, enum.Enum):\n    INACTIVE = \"I\"\n    ACTIVE = \"A\"\nclass UserTypeEnum(str, enum.Enum):\n    SUPERADMIN = \"S\"\n    ADMIN = \"A\"\n    PARTNER = \"P\"\nclass AdminUser(Base):\n    __tablename__ = \"admin_users\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "UserTypeEnum",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class UserTypeEnum(str, enum.Enum):\n    SUPERADMIN = \"S\"\n    ADMIN = \"A\"\n    PARTNER = \"P\"\nclass AdminUser(Base):\n    __tablename__ = \"admin_users\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(\n        Enum(UserStatusEnum, values_callable=lambda enum_cls: [\n            e.value for e in enum_cls]),",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "AdminUser",
        "kind": 6,
        "importPath": "src.models.user_model",
        "description": "src.models.user_model",
        "peekOfCode": "class AdminUser(Base):\n    __tablename__ = \"admin_users\"\n    id = Column(BigInteger, primary_key=True, index=True, autoincrement=True)\n    status = Column(\n        Enum(UserStatusEnum, values_callable=lambda enum_cls: [\n            e.value for e in enum_cls]),\n        nullable=False,\n        default=UserStatusEnum.INACTIVE\n    )\n    username = Column(String(100))",
        "detail": "src.models.user_model",
        "documentation": {}
    },
    {
        "label": "getTimeZoneData",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def getTimeZoneData():\n    with open(TIME_ZONE, \"r\", encoding=\"utf-8\") as file:\n        data = json.load(file)  # <- remove 'await'\n    return data\n@router.post(\"/basic-site-setting\")\nasync def basic_site_setting(\n    logo_fav_data: Annotated[LogoFavSchema, Depends(LogoFavSchema.from_request)],\n    common_setting: Annotated[CommonSetting, Depends(CommonSetting.from_request)],\n    email_update: Annotated[EmailUpdate, Depends(EmailUpdate.from_request)],\n    db: DBSession,",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "get_all_site_setting_data",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def get_all_site_setting_data(request: Request, db: DBSession, valid_token=Depends(validate_token)):\n    if isinstance(valid_token, JSONResponse):\n        return valid_token\n    base_url = f\"{request.url.scheme}://{request.url.hostname}:{request.url.port}/api/uploads\"\n    try:\n        # synchronous query\n        result = db.query(SiteConfig).filter(SiteConfig.status == \"A\").first()\n        if not result:\n            return JSONResponse(\n                content={\"status\": \"error\",",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "get_social_media_data",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def get_social_media_data(request_data: Annotated[ListDataSchema, Depends(ListDataSchema.from_request)], db: DBSession, page: int = Query(1, g=1), valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    # STATUS UPDATE -------------------------\n    if request_data.status_update in [\"A\", \"I\", \"DELETE\"] and len(request_data.checkbox_val) > 0:\n        return status_update(request_data, db, Social)\n    # SORTING, SEARCHING AND PAGINATION -------------------------\n    query = db.query(Social)\n    response_data = sort_search_paginate_data(\n        request_data, db, Social, query, page)",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "add_social_media",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def add_social_media(\n    request_data: Annotated[SocialMediaSchema, Depends(SocialMediaSchema.from_request)],\n    db: DBSession,\n    valid_token=Depends(validate_token)\n):\n    if (res := check_token_response(valid_token)):\n        return res\n    return handleSocialMedia(request_data, db)\n@router.get(\"/social-media/edit/{edit_id}\")\ndef social_edit_data(edit_id: int, db: DBSession, valid_token=Depends(validate_token)):",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "social_edit_data",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def social_edit_data(edit_id: int, db: DBSession, valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    edit_social_data = edit_data(db, Social, edit_id)\n    if edit_social_data is None:\n        return JSONResponse(\n            content={\"status\": \"error\", \"message\": \"Record not found!\"},\n            status_code=200\n        )\n    return JSONResponse(",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "get_page_seo_data",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def get_page_seo_data(request_data: Annotated[ListDataSchema, Depends(ListDataSchema.from_request)], db: DBSession, page: int = Query(1, g=1), valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    # STATUS UPDATE -------------------------\n    if request_data.status_update in [\"A\", \"I\", \"DELETE\"] and len(request_data.checkbox_val) > 0:\n        return status_update(request_data, db, PageSEO)\n    # SORTING, SEARCHING AND PAGINATION -------------------------\n    query = db.query(PageSEO)\n    response_data = sort_search_paginate_data(\n        request_data, db, PageSEO, query, page)",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "page_seo_edit_data",
        "kind": 2,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "def page_seo_edit_data(edit_id: int, db: DBSession, valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    edit_social_data = edit_data(db, PageSEO, edit_id)\n    if edit_social_data is None:\n        return JSONResponse(\n            content={\"status\": \"error\", \"message\": \"Record not found!\"},\n            status_code=200\n        )\n    return JSONResponse(",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "router = APIRouter()\nSOCIAL_LOGO_DIR = os.path.join(\"uploads\", \"social\")\nTIME_ZONE = Path(__file__).parent.parent / \"utils\" / \"timezone.json\"\ndef getTimeZoneData():\n    with open(TIME_ZONE, \"r\", encoding=\"utf-8\") as file:\n        data = json.load(file)  # <- remove 'await'\n    return data\n@router.post(\"/basic-site-setting\")\nasync def basic_site_setting(\n    logo_fav_data: Annotated[LogoFavSchema, Depends(LogoFavSchema.from_request)],",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "SOCIAL_LOGO_DIR",
        "kind": 5,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "SOCIAL_LOGO_DIR = os.path.join(\"uploads\", \"social\")\nTIME_ZONE = Path(__file__).parent.parent / \"utils\" / \"timezone.json\"\ndef getTimeZoneData():\n    with open(TIME_ZONE, \"r\", encoding=\"utf-8\") as file:\n        data = json.load(file)  # <- remove 'await'\n    return data\n@router.post(\"/basic-site-setting\")\nasync def basic_site_setting(\n    logo_fav_data: Annotated[LogoFavSchema, Depends(LogoFavSchema.from_request)],\n    common_setting: Annotated[CommonSetting, Depends(CommonSetting.from_request)],",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "src.routes.site_setting_route",
        "description": "src.routes.site_setting_route",
        "peekOfCode": "TIME_ZONE = Path(__file__).parent.parent / \"utils\" / \"timezone.json\"\ndef getTimeZoneData():\n    with open(TIME_ZONE, \"r\", encoding=\"utf-8\") as file:\n        data = json.load(file)  # <- remove 'await'\n    return data\n@router.post(\"/basic-site-setting\")\nasync def basic_site_setting(\n    logo_fav_data: Annotated[LogoFavSchema, Depends(LogoFavSchema.from_request)],\n    common_setting: Annotated[CommonSetting, Depends(CommonSetting.from_request)],\n    email_update: Annotated[EmailUpdate, Depends(EmailUpdate.from_request)],",
        "detail": "src.routes.site_setting_route",
        "documentation": {}
    },
    {
        "label": "staff_save",
        "kind": 2,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "def staff_save(\n    request_data: Annotated[StaffAddSchema, Depends(StaffAddSchema.from_request)],\n    db: DBSession,\n    valid_token=Depends(validate_token)\n):\n    if (res := check_token_response(valid_token)):\n        return res\n    if request_data.id is None:\n        if db.query(Users).filter(\n                Users.email == request_data.email).first():",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "staff_member_list",
        "kind": 2,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "def staff_member_list(request_data: Annotated[ListDataSchema, Depends(ListDataSchema.from_request)], db: DBSession, page: int = Query(1, ge=1), valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    # STATUS UPDATE -------------------------\n    if request_data.status_update in ['A', 'I', 'DELETE'] and len(request_data.checkbox_val) > 0:\n        return status_update(request_data, db, Users)\n    # SORTING, SEARCHING AND PAGINATION -------------------------\n    query = db.query(Users).filter(Users.user_type != \"S\")\n    # query = db.query(Users).filter()\n    response_data = sort_search_paginate_data(",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "staff_member_edit",
        "kind": 2,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "def staff_member_edit(edit_id: int, db: DBSession, valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    edit_user = edit_data(db, Users, edit_id)\n    if edit_user is None:\n        return JSONResponse(\n            content={\"status\": \"error\", \"message\": \"User not found!\"},\n            status_code=200\n        )\n    return JSONResponse(",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "staff_role_save",
        "kind": 2,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "def staff_role_save(\n    request_data: Annotated[StaffRoleSchema, Depends(StaffRoleSchema.from_request)],\n    db: DBSession,\n    valid_token=Depends(validate_token)\n):\n    if res := check_token_response(valid_token):\n        return res\n    query = db.query(Role)\n    try:\n        check_status = [",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "staff_role_list",
        "kind": 2,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "def staff_role_list(request_data: Annotated[ListDataSchema, Depends(ListDataSchema.from_request)], db: DBSession, page: int = Query(1, ge=1), valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    # STATUS UPDATE -------------------------\n    if request_data.status_update in ['A', 'I', 'DELETE'] and len(request_data.checkbox_val) > 0:\n        return status_update(request_data, db, Role)\n    # SORTING, SEARCHING AND PAGINATION -------------------------\n    query = db.query(Role).filter()\n    response_data = sort_search_paginate_data(\n        request_data, db, Role, query, page)",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "staff_role_edit",
        "kind": 2,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "def staff_role_edit(edit_id: int, db: DBSession, valid_token=Depends(validate_token)):\n    if (res := check_token_response(valid_token)):\n        return res\n    edit_user = edit_data(db, Role, edit_id)\n    if edit_user is None:\n        return JSONResponse(\n            content={\"status\": \"error\", \"message\": \"User not found!\"},\n            status_code=200\n        )\n    return JSONResponse(",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.staff_route",
        "description": "src.routes.staff_route",
        "peekOfCode": "router = APIRouter()\n@router.post(\"/staff-save\")\ndef staff_save(\n    request_data: Annotated[StaffAddSchema, Depends(StaffAddSchema.from_request)],\n    db: DBSession,\n    valid_token=Depends(validate_token)\n):\n    if (res := check_token_response(valid_token)):\n        return res\n    if request_data.id is None:",
        "detail": "src.routes.staff_route",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "src.routes.user_route",
        "description": "src.routes.user_route",
        "peekOfCode": "router = APIRouter(\n    prefix='/api',\n    tags=['api']\n)\n# ----------------- LOGIN ROUTE --------------------------#\n@router.post(\"/login\")\nasync def login_user(\n    request: Request,\n    db: DBSession,\n    request_data: LoginSchema = Depends(LoginSchema.from_request)",
        "detail": "src.routes.user_route",
        "documentation": {}
    },
    {
        "label": "LoginSchema",
        "kind": 6,
        "importPath": "src.schemas.auth_schema",
        "description": "src.schemas.auth_schema",
        "peekOfCode": "class LoginSchema(BaseModel, MultiFormatRequest):\n    email: str\n    password: str\n    @field_validator(\"email\")\n    def email_must_have_at(cls, v):\n        if \"@\" not in v:\n            raise ValueError(\"Invalid email format\")\n        return v\n    @field_validator(\"password\")\n    def password_min_length(cls, v):",
        "detail": "src.schemas.auth_schema",
        "documentation": {}
    },
    {
        "label": "ChangePassword",
        "kind": 6,
        "importPath": "src.schemas.auth_schema",
        "description": "src.schemas.auth_schema",
        "peekOfCode": "class ChangePassword(BaseModel, MultiFormatRequest):\n    id: int\n    password: str\n    new_password: str\n    confirm_password: str\n    @model_validator(mode=\"after\")\n    def validate_fields(self):\n        for field_name in [\"password\", \"new_password\", \"confirm_password\"]:\n            value = getattr(self, field_name)\n            if not (6 <= len(value) <= 8):",
        "detail": "src.schemas.auth_schema",
        "documentation": {}
    },
    {
        "label": "ListDataSchema",
        "kind": 6,
        "importPath": "src.schemas.common_schema",
        "description": "src.schemas.common_schema",
        "peekOfCode": "class ListDataSchema(BaseModel, MultiFormatRequest):\n    sort_order: Optional[str] = \"DESC\"\n    sort_column: Optional[str] = \"id\"\n    search_field: Optional[str] = None\n    limit_per_page: Optional[int] = 10\n    page: Optional[int] = 1\n    status_update: Optional[str] = \"A\"\n    checkbox_val: Optional[list] = []",
        "detail": "src.schemas.common_schema",
        "documentation": {}
    },
    {
        "label": "LogoFavSchema",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class LogoFavSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    favicon: Optional[UploadFile] = None\n    logo: Optional[UploadFile] = None\n    flag: Optional[str] = None\n    @field_validator(\"logo\", \"favicon\")\n    def validate_images(cls, file: UploadFile):\n        if not file:\n            return file\n        filename = file.filename.lower()",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "CommonSetting",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class CommonSetting(BaseModel, MultiFormatRequest):\n    id: Optional[str] = None\n    flag: Optional[str] = None\n    contact_no: Optional[str] = None\n    google_analytics_code: Optional[str] = None\n    footer_text: Optional[str] = None\n    about_footer: Optional[str] = None\n    full_address: Optional[str] = None\n    web_name: Optional[str] = None\n    web_frienly_name: Optional[str] = None",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "EmailUpdate",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class EmailUpdate(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    flag: Optional[str] = None\n    contact_email: Optional[str] = None\n    from_email: Optional[str] = None\nclass SocialMediaSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    social_name: str\n    social_link: str\n    social_logo: UploadFile",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "SocialMediaSchema",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class SocialMediaSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    social_name: str\n    social_link: str\n    social_logo: UploadFile\n    status: str\n    @field_validator(\"social_link\")\n    def social_link_validate(cls, v):\n        if not v.startswith((\"http://\", \"https://\")):\n            raise ValueError(\"social_link must be valid URL\")",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "StaffAddSchema",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class StaffAddSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    username: str\n    email: str\n    password: str\n    user_type: str\n    role: str\n    status: str\n    @field_validator(\"email\")\n    def email_validation(cls, v):",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "StaffRoleSchema",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class StaffRoleSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    status: str\n    role_name: str\n    site_setting: str\n    banner: str\n    category: str\n    currency: str\n    tax_data: str\n    country: str",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "PublicPageSEOSchema",
        "kind": 6,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "class PublicPageSEOSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    page_name: str\n    meta_title: str\n    meta_description: str\n    meta_image: UploadFile\n    status: str\n    @field_validator(\"meta_image\")\n    def validate_images(cls, file: UploadFile):\n        if not file:",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "MAX_FILE_SIZE",
        "kind": 5,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "MAX_FILE_SIZE = 5 * 1024 * 1024  # 5 MB\nALLOWED_EXTENSIONS = {\".jpg\", \".jpeg\", \".png\"}\nclass LogoFavSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    favicon: Optional[UploadFile] = None\n    logo: Optional[UploadFile] = None\n    flag: Optional[str] = None\n    @field_validator(\"logo\", \"favicon\")\n    def validate_images(cls, file: UploadFile):\n        if not file:",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "ALLOWED_EXTENSIONS",
        "kind": 5,
        "importPath": "src.schemas.site_setting_schema",
        "description": "src.schemas.site_setting_schema",
        "peekOfCode": "ALLOWED_EXTENSIONS = {\".jpg\", \".jpeg\", \".png\"}\nclass LogoFavSchema(BaseModel, MultiFormatRequest):\n    id: Optional[int] = None\n    favicon: Optional[UploadFile] = None\n    logo: Optional[UploadFile] = None\n    flag: Optional[str] = None\n    @field_validator(\"logo\", \"favicon\")\n    def validate_images(cls, file: UploadFile):\n        if not file:\n            return file",
        "detail": "src.schemas.site_setting_schema",
        "documentation": {}
    },
    {
        "label": "check_token_response",
        "kind": 2,
        "importPath": "src.utils.helper",
        "description": "src.utils.helper",
        "peekOfCode": "def check_token_response(valid_token):\n    if isinstance(valid_token, JSONResponse):\n        return valid_token\n    return None\ndef status_update(request_data, db, Model):\n    try:\n        query = db.query(Model).filter(\n            Model.id.in_(request_data.checkbox_val))\n        if request_data.status_update == \"DELETE\":\n            rows_deleted = query.delete(synchronize_session=False)",
        "detail": "src.utils.helper",
        "documentation": {}
    },
    {
        "label": "status_update",
        "kind": 2,
        "importPath": "src.utils.helper",
        "description": "src.utils.helper",
        "peekOfCode": "def status_update(request_data, db, Model):\n    try:\n        query = db.query(Model).filter(\n            Model.id.in_(request_data.checkbox_val))\n        if request_data.status_update == \"DELETE\":\n            rows_deleted = query.delete(synchronize_session=False)\n            db.commit()\n            if rows_deleted == 0:\n                return JSONResponse(\n                    content={\"status\": \"error\",",
        "detail": "src.utils.helper",
        "documentation": {}
    },
    {
        "label": "sort_search_paginate_data",
        "kind": 2,
        "importPath": "src.utils.helper",
        "description": "src.utils.helper",
        "peekOfCode": "def sort_search_paginate_data(request_data, db, Model, query, page):\n    limit = getattr(request_data, \"limit_per_page\", 10) or 10\n    sort_order = getattr(request_data, \"sort_order\", \"ASC\").upper()\n    sort_column_name = getattr(request_data, \"sort_column\", \"id\")\n    search_field_value = getattr(request_data, \"search_field\", None)\n    print(\"search_field_value,search_column_name\",\n          search_field_value, sort_column_name)\n    if search_field_value and sort_column_name:\n        search_column = getattr(Model, sort_column_name, None)\n        if search_column is not None:",
        "detail": "src.utils.helper",
        "documentation": {}
    },
    {
        "label": "edit_data",
        "kind": 2,
        "importPath": "src.utils.helper",
        "description": "src.utils.helper",
        "peekOfCode": "def edit_data(db, Model, edit_id):\n    return db.query(Model).filter(Model.id == edit_id).first()",
        "detail": "src.utils.helper",
        "documentation": {}
    },
    {
        "label": "get_role_hash",
        "kind": 2,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "def get_role_hash(role: str) -> str:\n    \"\"\"Return a consistent hash for a user role.\"\"\"\n    return hashlib.md5(role.encode()).hexdigest()\ndef get_ip_hash(ip: str) -> str:\n    \"\"\"Return a hash of the user's IP address.\"\"\"\n    return hashlib.md5(ip.encode()).hexdigest()\n# ---------- CREATE AND GET JWToken ---------------#\ndef get_jwt_token(request: Request, email: str, user_id: int, role: str):\n    now = datetime.now()\n    expires = now + timedelta(minutes=5)",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "get_ip_hash",
        "kind": 2,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "def get_ip_hash(ip: str) -> str:\n    \"\"\"Return a hash of the user's IP address.\"\"\"\n    return hashlib.md5(ip.encode()).hexdigest()\n# ---------- CREATE AND GET JWToken ---------------#\ndef get_jwt_token(request: Request, email: str, user_id: int, role: str):\n    now = datetime.now()\n    expires = now + timedelta(minutes=5)\n    iss = str(request.base_url) + \"api/login\"\n    payload = {\n        \"iss\": iss,",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "get_jwt_token",
        "kind": 2,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "def get_jwt_token(request: Request, email: str, user_id: int, role: str):\n    now = datetime.now()\n    expires = now + timedelta(minutes=5)\n    iss = str(request.base_url) + \"api/login\"\n    payload = {\n        \"iss\": iss,\n        \"iat\": now,\n        \"nbf\": now,\n        \"exp\": expires,\n        \"jti\": str(uuid.uuid4())[:16],",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "SECRET_KEY = os.getenv(\"SECRET_KEY\")\nALGORITHM = os.getenv(\"ALGORITHM\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"/login\", auto_error=False)\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n# ----------- ROLE AND IP HASHING -------------#\ndef get_role_hash(role: str) -> str:\n    \"\"\"Return a consistent hash for a user role.\"\"\"\n    return hashlib.md5(role.encode()).hexdigest()\ndef get_ip_hash(ip: str) -> str:\n    \"\"\"Return a hash of the user's IP address.\"\"\"",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "ALGORITHM = os.getenv(\"ALGORITHM\")\noauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"/login\", auto_error=False)\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n# ----------- ROLE AND IP HASHING -------------#\ndef get_role_hash(role: str) -> str:\n    \"\"\"Return a consistent hash for a user role.\"\"\"\n    return hashlib.md5(role.encode()).hexdigest()\ndef get_ip_hash(ip: str) -> str:\n    \"\"\"Return a hash of the user's IP address.\"\"\"\n    return hashlib.md5(ip.encode()).hexdigest()",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "oauth2_bearer",
        "kind": 5,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "oauth2_bearer = OAuth2PasswordBearer(tokenUrl=\"/login\", auto_error=False)\nbcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n# ----------- ROLE AND IP HASHING -------------#\ndef get_role_hash(role: str) -> str:\n    \"\"\"Return a consistent hash for a user role.\"\"\"\n    return hashlib.md5(role.encode()).hexdigest()\ndef get_ip_hash(ip: str) -> str:\n    \"\"\"Return a hash of the user's IP address.\"\"\"\n    return hashlib.md5(ip.encode()).hexdigest()\n# ---------- CREATE AND GET JWToken ---------------#",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "bcrypt_context",
        "kind": 5,
        "importPath": "src.utils.jwt_token",
        "description": "src.utils.jwt_token",
        "peekOfCode": "bcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')\n# ----------- ROLE AND IP HASHING -------------#\ndef get_role_hash(role: str) -> str:\n    \"\"\"Return a consistent hash for a user role.\"\"\"\n    return hashlib.md5(role.encode()).hexdigest()\ndef get_ip_hash(ip: str) -> str:\n    \"\"\"Return a hash of the user's IP address.\"\"\"\n    return hashlib.md5(ip.encode()).hexdigest()\n# ---------- CREATE AND GET JWToken ---------------#\ndef get_jwt_token(request: Request, email: str, user_id: int, role: str):",
        "detail": "src.utils.jwt_token",
        "documentation": {}
    },
    {
        "label": "MultiFormatRequest",
        "kind": 6,
        "importPath": "src.utils.request_parser",
        "description": "src.utils.request_parser",
        "peekOfCode": "class MultiFormatRequest:\n    @classmethod\n    async def from_request(cls: Type[T], request: Request) -> T:\n        content_type = request.headers.get(\"content-type\", \"\")\n        data = {}\n        if not content_type:\n            return cls(**data)\n        if \"application/json\" in content_type:\n            data = await request.json()\n        elif \"application/x-www-form-urlencoded\" in content_type or \"multipart/form-data\" in content_type:",
        "detail": "src.utils.request_parser",
        "documentation": {}
    },
    {
        "label": "BaseDic",
        "kind": 6,
        "importPath": "src.utils.request_parser",
        "description": "src.utils.request_parser",
        "peekOfCode": "class BaseDic:\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n    def as_dict(self, exclude_fields=None):\n        if exclude_fields is None:\n            exclude_fields = []\n        result = {}\n        for c in self.__table__.columns:\n            if c.name in exclude_fields:",
        "detail": "src.utils.request_parser",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "src.utils.request_parser",
        "description": "src.utils.request_parser",
        "peekOfCode": "T = TypeVar(\"T\")\nclass MultiFormatRequest:\n    @classmethod\n    async def from_request(cls: Type[T], request: Request) -> T:\n        content_type = request.headers.get(\"content-type\", \"\")\n        data = {}\n        if not content_type:\n            return cls(**data)\n        if \"application/json\" in content_type:\n            data = await request.json()",
        "detail": "src.utils.request_parser",
        "documentation": {}
    },
    {
        "label": "get_role",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def get_role():\n    return JSONResponse(content={\"status\": \"success\", \"message\": \"Welcome Fast API URL!\"}, status_code=200)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = FastAPI(\n    docs_url=False\n)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "UPLOAD_DIR",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "UPLOAD_DIR = Path(__file__).parent / \"uploads\"\napp.mount(\"/api/uploads\", StaticFiles(directory=UPLOAD_DIR), name=\"uploads\")\nprint(\"UPLOAD_DIR\", UPLOAD_DIR)\nmodels.Base.metadata.create_all(bind=engine)\n# @app.get(\"/debug-files\")\n# async def debug_files():\n#     import os\n#     import json\n#     debug_info = {\n#         \"current_directory\": os.getcwd(),",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "test_db",
        "description": "test_db",
        "peekOfCode": "db = SessionLocal()\nroles = db.query(AdminRole).all()\nprint(roles)",
        "detail": "test_db",
        "documentation": {}
    },
    {
        "label": "roles",
        "kind": 5,
        "importPath": "test_db",
        "description": "test_db",
        "peekOfCode": "roles = db.query(AdminRole).all()\nprint(roles)",
        "detail": "test_db",
        "documentation": {}
    }
]